# Makefile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –±–∞—Ç–∞—Ä–µ–∏ MacBat
# –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å test_*.go

.PHONY: all build run test test-fixed test-unit test-coverage test-bench test-race \
	test-memory test-threading test-debug test-specific check-test-files \
	setup-links cleanup-links rename-to-standard restore-from-standard \
	lint fmt vet deps clean clean-build quick dev info help

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PACKAGE = ./...
COVERAGE_FILE = coverage.out
COVERAGE_HTML = coverage.html

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ ---
BINARY_NAME=macbat
MAIN_PATH=./cmd/macbat

# –§–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∞–≤—Ç–æ-–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Å–±–æ—Ä–∫–∏
BUILD_SCRIPT = ./scripts/update_build_number.sh

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏, –ø–æ–ª—É—á–∞–µ–º–∞—è –∏–∑ Git.
# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥. –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'dev'.
VERSION ?= $(shell git describe --tags --abbrev=0 2>/dev/null || echo "dev")
COMMIT_HASH ?= $(shell git rev-parse --short HEAD)
BUILD_DATE ?= $(shell date -u +'%Y-%m-%dT%H:%M:%SZ')

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ (—Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å—á—ë—Ç—á–∏–∫)
BUILD_NUMBER := $(shell bash $(BUILD_SCRIPT) $(VERSION))
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ –∫ –≤–µ—Ä—Å–∏–∏
# VERSION := $(VERSION)+$(BUILD_NUMBER)

# –ü—É—Ç—å –º–æ–¥—É–ª—è
MODULE_PATH = github.com/qzeleza/macbat

# –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ -ldflags –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏.
LDFLAGS = "\
    -X '$(MODULE_PATH)/internal/version.Version=$(VERSION)' \
    -X '$(MODULE_PATH)/internal/version.CommitHash=$(COMMIT_HASH)' \
    -X '$(MODULE_PATH)/internal/version.BuildDate=$(BUILD_DATE)' \
    -X '$(MODULE_PATH)/internal/version.BuildNumber=$(BUILD_NUMBER)'"

# –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã test_*.go
TEST_PREFIX_FILES = $(shell find . -name "test_*.go" -type f)

# –¶–≤–µ—Ç–∞
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
BLUE = \033[34m
NC = \033[0m

all: test

# --- –¶–µ–ª–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏ ---
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub ---
REPO = qzeleza/macbat
TAP_REPO = qzeleza/homebrew-macbat
GH ?= gh                     
RELEASE_TITLE = "MacBat $(VERSION)"

# –¶–µ–ª—å: del-tag ‚Äì —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–≥ –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ origin.
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: make del-tag TAG=v2.1.1
del-tag: ## –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–≥ TAG=<tag>
	@if [ -z "$(TAG)" ]; then \
		echo "$(RED)–ù–µ —É–∫–∞–∑–∞–Ω TAG. –ü—Ä–∏–º–µ—Ä: make del-tag TAG=v2.1.1$(NC)"; exit 1; fi
	@echo "$(YELLOW)–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ $(TAG)...$(NC)"
	@git tag -d $(TAG) 2>/dev/null || true
	@git push --delete origin $(TAG) 2>/dev/null || true
	@echo "$(GREEN)–¢–µ–≥ $(TAG) —É–¥–∞–ª—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–∞ origin$(NC)"

# –¶–µ–ª—å: tag ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏ –∏ –ø—É—à –≤ origin
next-tag: ## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç PATCH –Ω–∞ 1) –∏ –∑–∞–ø—É—à–∏—Ç—å
	# –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –≤–∏–¥–∞ vX.Y.Z
	@PREV=$$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1); \
	if [ -z "$$PREV" ]; then PREV=v0.0.0; fi; \
	echo "$(YELLOW)–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥: $$PREV$(NC)"; \
	NEW=$$(echo $$PREV | sed 's/^v//' | awk -F. '{OFS="."; $$NF=$$NF+1; print $$0}'); \
	NEW_TAG=v$$NEW; \
	if git rev-parse $(NEW_TAG) >/dev/null 2>&1; then \
		echo "$(YELLOW)–¢–µ–≥ $(NEW_TAG) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≤ origin...$(NC)"; \
		git tag -d $(NEW_TAG) >/dev/null; \
		git push --delete origin $(NEW_TAG) >/dev/null 2>&1 || true; \
		$(GH) release delete $(NEW_TAG) --yes >/dev/null 2>&1 || true; \
	fi; \
	echo "$(GREEN)–ù–æ–≤—ã–π —Ç–µ–≥: $$NEW_TAG$(NC)"; \
	git tag -a $$NEW_TAG -m "–í—ã–ø—É—Å–∫ $$NEW_TAG"; \
	git push origin $$NEW_TAG; \
	echo "$(GREEN)–¢–µ–≥ $$NEW_TAG —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω$(NC)"

# –¶–µ–ª—å: publish ‚Äì –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub
# 1. –°–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ (make release)
# 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ –≤–µ—Ä—Å–∏–∏ –∏ –ø—É—à –≤ origin
# 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ —á–µ—Ä–µ–∑ gh cli –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
# 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ tar.gz –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤, –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ sha256
# 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Homebrew formula macbat.rb (version + sha256)
# 6. –ö–æ–º–º–∏—Ç formula –∏ –ø—É—à –≤ origin
# –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω GitHub CLI (`gh`) –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GH_TOKEN —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
publish: release next-tag ## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑, –≤—ã–ª–æ–∂–∏—Ç—å –Ω–∞ GitHub –∏ –æ–±–Ω–æ–≤–∏—Ç—å Homebrew formula
	
	@echo "$(YELLOW)‚ñ∂Ô∏è  –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–ª–∏–∑–∞ $(VERSION)$(NC)"
	@if ! $(GH) auth status >/dev/null 2>&1; then \
		echo "$(RED)üîë GH CLI –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'gh auth login' –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ GH_TOKEN$(NC)"; exit 1; fi
	

	
	# --- GitHub release ---
	@echo "$(YELLOW)–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ $(VERSION)...$(NC)"
	$(GH) release create $(VERSION) ./$(BINARY_NAME) \
		--repo $(REPO) \
		--title $(RELEASE_TITLE) \
		--notes "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–ª–∏–∑ $(VERSION), build $(BUILD_NUMBER)"
	
	@echo "$(YELLOW)–°–±–æ—Ä–∫–∞ –∏ —É–ø–∞–∫–æ–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–æ–≤ –¥–ª—è macOS (amd64/arm64)...$(NC)"; \
	mkdir -p dist; \
	for ARCH in amd64 arm64; do \
		GOOS=darwin GOARCH=$$ARCH CGO_ENABLED=1 go build -ldflags=$(LDFLAGS) -o dist/macbat $$PWD/$(MAIN_PATH); \
		tar -czf dist/macbat-darwin-$$ARCH.tar.gz -C dist macbat; \
		echo "$(CYAN)‚Äì $$ARCH —Å–æ–±—Ä–∞–Ω$(NC)"; \
		$(GH) release upload $(VERSION) dist/macbat-darwin-$$ARCH.tar.gz --clobber; \
		mv dist/macbat dist/macbat-$$ARCH; \
	done; \
	SHA_AMD64=$$(shasum -a 256 dist/macbat-darwin-amd64.tar.gz | awk '{print $$1}'); \
	SHA_ARM64=$$(shasum -a 256 dist/macbat-darwin-arm64.tar.gz | awk '{print $$1}'); \
	echo "$(YELLOW)–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π Homebrew formula $(BINARY_NAME).rb...$(NC)"; \
	FORMULA_TMP=$$(mktemp); \
	printf 'class Macbat < Formula\n' > $$FORMULA_TMP; \
	printf '  desc "–£—Ç–∏–ª–∏—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (binary)"\n' >> $$FORMULA_TMP; \
	printf '  homepage "https://github.com/$(REPO)"\n' >> $$FORMULA_TMP; \
	printf '  version "%s"\n\n' "$(VERSION)" >> $$FORMULA_TMP; \
	printf '  on_macos do\n' >> $$FORMULA_TMP; \
	printf '    if Hardware::CPU.arm?\n' >> $$FORMULA_TMP; \
	printf '      url "https://github.com/$(REPO)/releases/download/%s/macbat-darwin-arm64.tar.gz"\n' "$(VERSION)" >> $$FORMULA_TMP; \
	printf '      sha256 "%s"\n' "$$SHA_ARM64" >> $$FORMULA_TMP; \
	printf '    else\n' >> $$FORMULA_TMP; \
	printf '      url "https://github.com/$(REPO)/releases/download/%s/macbat-darwin-amd64.tar.gz"\n' "$(VERSION)" >> $$FORMULA_TMP; \
	printf '      sha256 "%s"\n' "$$SHA_AMD64" >> $$FORMULA_TMP; \
	printf '    end\n  end\n\n' >> $$FORMULA_TMP; \
	printf '  def install\n    bin.install "macbat"\n  end\n\n' >> $$FORMULA_TMP; \
	printf '  test do\n    system "#{bin}/macbat", "--version"\n  end\nend\n' >> $$FORMULA_TMP; \
	mv $$FORMULA_TMP $(BINARY_NAME).rb; \

	echo "$(GREEN)Formula —Å –±–∏–Ω–∞—Ä–Ω–∏–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∞$(NC)";
	echo "$(YELLOW)–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ tap-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...$(NC)"; \
	TMP=$$(mktemp -d); \
	git clone --depth=1 "https://github.com/$(TAP_REPO).git" $$TMP; \
	mkdir -p $$TMP/Formula; cp $(BINARY_NAME).rb $$TMP/Formula/; \
	(cd $$TMP && git add Formula/$(BINARY_NAME).rb && git commit -m '$(BINARY_NAME) $(VERSION) (bin)' && git push origin HEAD); \
	rm -rf $$TMP; \
	echo "$(GREEN)‚úÖ –†–µ–ª–∏–∑ $(VERSION) —Å –±–∏–Ω–∞—Ä–Ω–∏–∫–∞–º–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω$(NC)"

build: ## –°–æ–±—Ä–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ $(BINARY_NAME)...$(NC)"
	@echo "  –í–µ—Ä—Å–∏—è: $(VERSION)"
	@echo "  –ö–æ–º–º–∏—Ç: $(COMMIT_HASH)"
	@echo "  –î–∞—Ç–∞: $(BUILD_DATE)"
	@echo "  –ù–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏: $(BUILD_NUMBER)"
	CGO_ENABLED=1 go build -ldflags=$(LDFLAGS) -o $(BINARY_NAME) $(MAIN_PATH)
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ./$(BINARY_NAME)$(NC)"

run: build ## –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)–£–¥–∞–ª—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã $(BINARY_NAME)...$(NC)"
	killall $(BINARY_NAME) 2>/dev/null || true
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ $(BINARY_NAME) –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	./$(BINARY_NAME)
	@echo "$(CYAN)–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:$(NC)"
	./$(BINARY_NAME) --log 
	@echo "$(CYAN)–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:$(NC)"
	ps -ax | grep -v grep | grep '/$(BINARY_NAME)' --color=always

release: clean
	@echo "$(YELLOW)–°–±–æ—Ä–∫–∞ $(BINARY_NAME) –¥–ª—è —Ä–µ–ª–∏–∑–∞...$(NC)"
	CGO_ENABLED=1 go build -ldflags=$(LDFLAGS) -o $(BINARY_NAME) ./cmd/$(BINARY_NAME)
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ./$(BINARY_NAME)$(NC)"

install: clean release
	@echo "$(YELLOW)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ $(BINARY_NAME) –≤ /usr/local/bin...$(NC)"
	@cp ./$(BINARY_NAME) /usr/local/bin/
	@echo "$(GREEN)–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.$(NC)"

clean-build: ## –£–¥–∞–ª–∏—Ç—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
	@echo "$(YELLOW)–û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏...$(NC)"
	@rm -f $(BINARY_NAME)
	@echo "$(GREEN)–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.$(NC)"

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(GREEN)MacBat Makefile$(NC)"
	@echo ""
	# –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS=":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(CYAN)–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ü–µ–ª–∏:$(NC)"
	@echo "  $(GREEN)make run$(NC)       ‚Äì —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  $(GREEN)make release$(NC)   ‚Äì —Å–±–æ—Ä–∫–∞ —Ä–µ–ª–∏–∑–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"
	@echo "  $(GREEN)make install$(NC)   ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –≤ /usr/local/bin"
	@echo "  $(GREEN)make clean$(NC)     ‚Äì –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"
	@echo "  $(GREEN)make test$(NC)      ‚Äì –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make info$(NC)      ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ"
	@echo ""
	@echo "$(CYAN)–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏:$(NC)"
	@echo "  $(GREEN)make deps$(NC)      ‚Äì —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
	@echo "  $(GREEN)make quick$(NC)     ‚Äì –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
	@echo "  $(GREEN)make dev$(NC)       ‚Äì —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
	@echo "  $(GREEN)make fmt$(NC)       ‚Äì —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"
	@echo "  $(GREEN)make vet$(NC)       ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞"
	@echo "  $(GREEN)make test-fixed$(NC) ‚Äì –∑–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-unit$(NC)  ‚Äì –∑–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-coverage$(NC) ‚Äì —Ç–µ—Å—Ç—ã —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
	@echo "  $(GREEN)make test-race$(NC)   ‚Äì —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–æ–Ω–æ–∫"
	@echo "  $(GREEN)make test-specific TEST=X$(NC) ‚Äì –∑–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"
	@echo ""
	@echo "$(CYAN)–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏:$(NC)"
	@echo "  $(GREEN)make profile-cpu$(NC) ‚Äì CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"
	@echo "  $(GREEN)make profile-mem$(NC) ‚Äì –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"


# –£–¢–ò–õ–ò–¢–´
clean: clean-build cleanup-links ## –û—á–∏—Å—Ç–∫–∞
	@rm -f $(COVERAGE_FILE) $(COVERAGE_HTML) *.prof
	@rm -rf .makefile_backup .makefile_links
	@go clean -testcache

deps: ## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@go mod download && go mod tidy

quick: fmt vet test ## –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

dev: quick test-race ## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(GREEN)MacBat –ø—Ä–æ–µ–∫—Ç:$(NC)"
	@echo "  Go: $$(go version | awk '{print $$3}')"
	@echo "  –§–∞–π–ª—ã test_*.go: $(shell echo '$(TEST_PREFIX_FILES)' | wc -w)"
	@echo "  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ *_test.go: $(shell find . -name '*_test.go' | wc -l)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		total=0; \
		for file in $(TEST_PREFIX_FILES); do \
			count=$$(grep -c '^func Test' $$file 2>/dev/null || echo 0); \
			total=$$((total + count)); \
		done; \
		echo "  –§—É–Ω–∫—Ü–∏–π Test*: $$total"; \
	fi




# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏)
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ test_*.go...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		echo "$(GREEN)–ó–∞–ø—É—Å–∫ go test...$(NC)"; \
		go test -v $(PACKAGE) -short || true; \
		$(MAKE) cleanup-links; \
	else \
		echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤$(NC)"; \
		go test -v $(PACKAGE) -short; \
	fi

test-fixed: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Fixed.*|.*Stable.*|.*Robust.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Fixed.*|.*Stable.*|.*Robust.*"; \
	fi

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)Unit —Ç–µ—Å—Ç—ã...$(NC)"
	@$(MAKE) test

test-coverage: ## –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
	@echo "$(GREEN)–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -coverprofile=$(COVERAGE_FILE) -covermode=atomic || true; \
		if [ -f $(COVERAGE_FILE) ]; then \
			go tool cover -html=$(COVERAGE_FILE) -o $(COVERAGE_HTML); \
			echo "$(GREEN)–û—Ç—á–µ—Ç: $(COVERAGE_HTML)$(NC)"; \
			go tool cover -func=$(COVERAGE_FILE) | tail -n 1; \
		fi; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -coverprofile=$(COVERAGE_FILE) -covermode=atomic; \
	fi

test-bench: ## –ë–µ–Ω—á–º–∞—Ä–∫–∏
	@echo "$(GREEN)–ë–µ–Ω—á–º–∞—Ä–∫–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -bench=. -benchmem || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -bench=. -benchmem; \
	fi

test-race: ## –¢–µ—Å—Ç—ã —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –≥–æ–Ω–æ–∫
	@echo "$(GREEN)–î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–Ω–æ–∫...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -race || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -race; \
	fi

test-memory: ## –¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏
	@echo "$(GREEN)–¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Memory.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Memory.*"; \
	fi

test-threading: ## –¢–µ—Å—Ç—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
	@echo "$(GREEN)–¢–µ—Å—Ç—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Thread.*|.*Concurrent.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Thread.*|.*Concurrent.*"; \
	fi

test-debug: ## –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
	@echo "$(GREEN)–û—Ç–ª–∞–¥–∫–∞...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -count=1 || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -count=1; \
	fi

test-specific: ## –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç (make test-specific TEST=TestName)
	@if [ -z "$(TEST)" ]; then \
		echo "$(RED)–£–∫–∞–∂–∏—Ç–µ TEST=TestName$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $(TEST)$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run "$(TEST)" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run "$(TEST)"; \
	fi

test-list: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		for file in $(TEST_PREFIX_FILES); do \
			echo "$(YELLOW)$$file:$(NC)"; \
			grep '^func Test' $$file | awk '{print $$2}' | cut -d'(' -f1 | sed 's/^/  /' || true; \
		done; \
	else \
		echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi

# –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê
lint: ## –õ–∏–Ω—Ç–µ—Ä
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		go vet $(PACKAGE); \
	fi

fmt: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@go fmt $(PACKAGE)

vet: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞  
	@go vet $(PACKAGE)


.DEFAULT_GOAL := help