# Makefile –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –±–∞—Ç–∞—Ä–µ–∏ MacBat
# –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å test_*.go

.PHONY: all build run test test-fixed test-unit test-coverage test-bench test-race \
	test-memory test-threading test-debug test-specific check-test-files \
	setup-links cleanup-links rename-to-standard restore-from-standard \
	lint fmt vet deps clean clean-build quick dev info help

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PACKAGE = ./...
COVERAGE_FILE = coverage.out
COVERAGE_HTML = coverage.html

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏ ---
BINARY_NAME=macbat
MAIN_PATH=./cmd/macbat

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏, –ø–æ–ª—É—á–∞–µ–º–∞—è –∏–∑ Git.
# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥. –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'dev'.
VERSION ?= $(shell git describe --tags --abbrev=0 2>/dev/null || echo "dev")
COMMIT_HASH ?= $(shell git rev-parse --short HEAD)
BUILD_DATE ?= $(shell date -u +'%Y-%m-%dT%H:%M:%SZ')

# –§–ª–∞–≥–∏ –∫–æ–º–ø–æ–Ω–æ–≤—â–∏–∫–∞ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª.
LDFLAGS = -ldflags="\
    -X 'macbat/internal/version.Version=$(VERSION)' \
    -X 'macbat/internal/version.CommitHash=$(COMMIT_HASH)' \
    -X 'macbat/internal/version.BuildDate=$(BUILD_DATE)'"

# –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã test_*.go
TEST_PREFIX_FILES = $(shell find . -name "test_*.go" -type f)

# –¶–≤–µ—Ç–∞
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
BLUE = \033[34m
NC = \033[0m

all: test

# --- –¶–µ–ª–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏ ---

build: ## –°–æ–±—Ä–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ $(BINARY_NAME)...$(NC)"
	@echo "  –í–µ—Ä—Å–∏—è: $(VERSION)"
	@echo "  –ö–æ–º–º–∏—Ç: $(COMMIT_HASH)"
	@echo "  –î–∞—Ç–∞: $(BUILD_DATE)"
	go build $(LDFLAGS) -o $(BINARY_NAME) $(MAIN_PATH)
	@echo "$(GREEN)–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ./$(BINARY_NAME)$(NC)"

run: build ## –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ $(BINARY_NAME)...$(NC)"
	./$(BINARY_NAME)

clean-build: ## –£–¥–∞–ª–∏—Ç—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
	@echo "$(YELLOW)–û—á–∏—Å—Ç–∫–∞ —Å–±–æ—Ä–∫–∏...$(NC)"
	@rm -f $(BINARY_NAME)
	@echo "$(GREEN)–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.$(NC)"

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
	@echo "$(GREEN)MacBat Test Makefile$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-25s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ test_*.go: $(shell echo '$(TEST_PREFIX_FILES)' | wc -w)$(NC)"
	@echo ""
	@echo "$(BLUE)üîß –†–ï–®–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´:$(NC)"
	@echo "  $(GREEN)make rename-to-standard$(NC)   - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å test_*.go ‚Üí *_test.go (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
	@echo "  $(GREEN)make test$(NC)                - –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "  $(GREEN)make restore-from-standard$(NC) - –í–µ—Ä–Ω—É—Ç—å *_test.go ‚Üí test_*.go"

check-test-files: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤
	@echo "$(GREEN)–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@echo ""
	@echo "$(YELLOW)–§–∞–π–ª—ã test_*.go (–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ):$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		for file in $(TEST_PREFIX_FILES); do \
			echo "  ‚ö†Ô∏è  $$file"; \
			echo "      –ü–∞–∫–µ—Ç: $$(head -1 $$file | awk '{print $$2}')"; \
			echo "      –¢–µ—Å—Ç–æ–≤: $$(grep -c '^func Test' $$file 2>/dev/null || echo 0)"; \
			dir=$$(dirname $$file); \
			base=$$(basename $$file .go); \
			standard_name="$${base#test_}_test.go"; \
			echo "      –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: $$dir/$$standard_name"; \
		done; \
	else \
		echo "  ‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω—ã"; \
	fi
	@echo ""
	@echo "$(YELLOW)–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ *_test.go —Ñ–∞–π–ª—ã:$(NC)"
	@find . -name "*_test.go" -type f | sed 's/^/  ‚úÖ /' || echo "  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã"
	@echo ""
	@echo "$(BLUE)üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'make rename-to-standard' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º Go$(NC)"

rename-to-standard: ## –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å test_*.go –≤ *_test.go (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)
	@echo "$(YELLOW)‚ö†Ô∏è  –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ test_*.go –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ *_test.go$(NC)"
	@echo "$(YELLOW)–≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)$(NC)"
	@read -r confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		if [ -n "$(TEST_PREFIX_FILES)" ]; then \
			echo "$(GREEN)–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã...$(NC)"; \
			mkdir -p .makefile_backup; \
			for file in $(TEST_PREFIX_FILES); do \
				dir=$$(dirname "$$file"); \
				base=$$(basename "$$file" .go); \
				new_name="$${base#test_}_test.go"; \
				new_path="$$dir/$$new_name"; \
				echo "  $$file ‚Üí $$new_path"; \
				if [ -f "$$new_path" ]; then \
					echo "    ‚ö†Ô∏è  $$new_path —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤"; \
					cp "$$new_path" ".makefile_backup/$$(basename $$new_path).backup"; \
				fi; \
				mv "$$file" "$$new_path"; \
				echo "$$file|$$new_path" >> .makefile_backup/renames.log; \
			done; \
			echo "$(GREEN)‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'go test' —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ$(NC)"; \
			echo "$(BLUE)–î–ª—è –æ—Ç–∫–∞—Ç–∞: make restore-from-standard$(NC)"; \
		else \
			echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		fi; \
	else \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

restore-from-standard: ## –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å test_*.go –∏–∑ *_test.go
	@if [ -f .makefile_backup/renames.log ]; then \
		echo "$(GREEN)–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω...$(NC)"; \
		while IFS='|' read -r original new; do \
			if [ -f "$$new" ]; then \
				echo "  $$new ‚Üí $$original"; \
				mv "$$new" "$$original"; \
			fi; \
		done < .makefile_backup/renames.log; \
		if [ -d .makefile_backup ]; then \
			for backup in .makefile_backup/*.backup; do \
				if [ -f "$$backup" ]; then \
					original_name=$$(basename "$$backup" .backup); \
					cp "$$backup" "./internal/battery/$$original_name" 2>/dev/null || true; \
				fi; \
			done; \
		fi; \
		rm -rf .makefile_backup; \
		echo "$(GREEN)‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ$(NC)"; \
	else \
		echo "$(YELLOW)–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è$(NC)"; \
	fi

setup-links: ## –°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	@echo "$(GREEN)–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		mkdir -p .makefile_links; \
		for file in $(TEST_PREFIX_FILES); do \
			dir=$$(dirname "$$file"); \
			base=$$(basename "$$file" .go); \
			new_name="$${base#test_}_test.go"; \
			link_path="$$dir/$$new_name"; \
			if [ -f "$$link_path" ]; then \
				echo "  ‚ö†Ô∏è  $$link_path —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"; \
			else \
				echo "  $$file ‚Üí $$link_path (—Å—Å—ã–ª–∫–∞)"; \
				ln -sf "$$(basename $$file)" "$$link_path"; \
				echo "$$link_path" >> .makefile_links/created.txt; \
			fi; \
		done; \
		echo "$(GREEN)‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ–∑–¥–∞–Ω—ã$(NC)"; \
	else \
		echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi

cleanup-links: ## –£–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
	@if [ -f .makefile_links/created.txt ]; then \
		echo "$(GREEN)–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫...$(NC)"; \
		while read -r link; do \
			if [ -L "$$link" ]; then \
				echo "  –£–¥–∞–ª—è–µ–º $$link"; \
				rm "$$link"; \
			fi; \
		done < .makefile_links/created.txt; \
		rm -rf .makefile_links; \
		echo "$(GREEN)‚úÖ –°—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω—ã$(NC)"; \
	fi

# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (—á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏)
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ test_*.go...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		echo "$(GREEN)–ó–∞–ø—É—Å–∫ go test...$(NC)"; \
		go test -v $(PACKAGE) -short || true; \
		$(MAKE) cleanup-links; \
	else \
		echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤$(NC)"; \
		go test -v $(PACKAGE) -short; \
	fi

test-fixed: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Fixed.*|.*Stable.*|.*Robust.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Fixed.*|.*Stable.*|.*Robust.*"; \
	fi

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)Unit —Ç–µ—Å—Ç—ã...$(NC)"
	@$(MAKE) test

test-coverage: ## –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
	@echo "$(GREEN)–¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -coverprofile=$(COVERAGE_FILE) -covermode=atomic || true; \
		if [ -f $(COVERAGE_FILE) ]; then \
			go tool cover -html=$(COVERAGE_FILE) -o $(COVERAGE_HTML); \
			echo "$(GREEN)–û—Ç—á–µ—Ç: $(COVERAGE_HTML)$(NC)"; \
			go tool cover -func=$(COVERAGE_FILE) | tail -n 1; \
		fi; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -coverprofile=$(COVERAGE_FILE) -covermode=atomic; \
	fi

test-bench: ## –ë–µ–Ω—á–º–∞—Ä–∫–∏
	@echo "$(GREEN)–ë–µ–Ω—á–º–∞—Ä–∫–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -bench=. -benchmem || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -bench=. -benchmem; \
	fi

test-race: ## –¢–µ—Å—Ç—ã —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –≥–æ–Ω–æ–∫
	@echo "$(GREEN)–î–µ—Ç–µ–∫—Ç–æ—Ä –≥–æ–Ω–æ–∫...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -race || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -race; \
	fi

test-memory: ## –¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏
	@echo "$(GREEN)–¢–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Memory.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Memory.*"; \
	fi

test-threading: ## –¢–µ—Å—Ç—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
	@echo "$(GREEN)–¢–µ—Å—Ç—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run ".*Thread.*|.*Concurrent.*" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run ".*Thread.*|.*Concurrent.*"; \
	fi

test-debug: ## –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –∑–∞–ø—É—Å–∫
	@echo "$(GREEN)–û—Ç–ª–∞–¥–∫–∞...$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -count=1 || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -count=1; \
	fi

test-specific: ## –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç (make test-specific TEST=TestName)
	@if [ -z "$(TEST)" ]; then \
		echo "$(RED)–£–∫–∞–∂–∏—Ç–µ TEST=TestName$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: $(TEST)$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		$(MAKE) setup-links; \
		go test -v $(PACKAGE) -short -run "$(TEST)" || true; \
		$(MAKE) cleanup-links; \
	else \
		go test -v $(PACKAGE) -short -run "$(TEST)"; \
	fi

test-list: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(GREEN)–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:$(NC)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		for file in $(TEST_PREFIX_FILES); do \
			echo "$(YELLOW)$$file:$(NC)"; \
			grep '^func Test' $$file | awk '{print $$2}' | cut -d'(' -f1 | sed 's/^/  /' || true; \
		done; \
	else \
		echo "$(YELLOW)–§–∞–π–ª—ã test_*.go –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi

# –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê
lint: ## –õ–∏–Ω—Ç–µ—Ä
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		go vet $(PACKAGE); \
	fi

fmt: ## –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	@go fmt $(PACKAGE)

vet: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞  
	@go vet $(PACKAGE)

# –£–¢–ò–õ–ò–¢–´
clean: cleanup-links ## –û—á–∏—Å—Ç–∫–∞
	@rm -f $(COVERAGE_FILE) $(COVERAGE_HTML) *.prof
	@rm -rf .makefile_backup .makefile_links
	@go clean -testcache

deps: ## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@go mod download && go mod tidy

quick: fmt vet test ## –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

dev: quick test-race ## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

info: ## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
	@echo "$(GREEN)MacBat –ø—Ä–æ–µ–∫—Ç:$(NC)"
	@echo "  Go: $$(go version | awk '{print $$3}')"
	@echo "  –§–∞–π–ª—ã test_*.go: $(shell echo '$(TEST_PREFIX_FILES)' | wc -w)"
	@echo "  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ *_test.go: $(shell find . -name '*_test.go' | wc -l)"
	@if [ -n "$(TEST_PREFIX_FILES)" ]; then \
		total=0; \
		for file in $(TEST_PREFIX_FILES); do \
			count=$$(grep -c '^func Test' $$file 2>/dev/null || echo 0); \
			total=$$((total + count)); \
		done; \
		echo "  –§—É–Ω–∫—Ü–∏–π Test*: $$total"; \
	fi

.DEFAULT_GOAL := help