// –ü–∞–∫–µ—Ç tray —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
package tray

import (
	_ "embed"
	"fmt"
	"macbat/internal/background"
	"macbat/internal/battery"
	"macbat/internal/config"
	"macbat/internal/logger"
	"macbat/internal/monitor"
	"macbat/internal/paths"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gen2brain/dlgs"
	"github.com/getlantern/systray"
)

// Tray —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫–æ–π –∏ –º–µ–Ω—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ.
type Tray struct {
	log         *logger.Logger
	bgManager   *background.Manager
	updateMu    sync.Mutex
	mChargeMode *systray.MenuItem
	mCurrent    *systray.MenuItem
	mMin        *systray.MenuItem
	mMax        *systray.MenuItem
	mCycles     *systray.MenuItem
	mHealth     *systray.MenuItem
	cfgManager  *config.Manager
	conf        *config.Config
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Tray.
func New(appLog *logger.Logger, cfg *config.Config, cfgManager *config.Manager, bgManager *background.Manager) *Tray {
	return &Tray{
		log:        appLog,
		conf:       cfg,
		cfgManager: cfgManager,
		bgManager:  bgManager,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç GUI-–∞–≥–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ.
func (t *Tray) Start() {
	systray.Run(t.onReady, t.onExit)
}

// onExit –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ systray.
func (t *Tray) onExit() {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
}

func (t *Tray) updateMenu() {
	t.updateMu.Lock()
	defer t.updateMu.Unlock()

	info, err := battery.GetBatteryInfo()
	if err != nil {
		t.mCurrent.SetTitle("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	chargeModeStr := "–†–∞–∑—Ä—è–¥–∫–∞"
	if info.IsCharging {
		chargeModeStr = "–ó–∞—Ä—è–¥–∫–∞"
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	minThreshold := t.conf.MinThreshold
	maxThreshold := t.conf.MaxThreshold

	chargeIcon := ""
	if info.IsCharging {
		chargeIcon = "‚ö°"
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –±–∞—Ç–∞—Ä–µ–∏
	icon := getBatteryIcon(info.CurrentCapacity, info.IsCharging)
	t.mCurrent.SetTitle(fmt.Sprintf("%-30s %d%% %s", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥:", info.CurrentCapacity, icon))
	t.mChargeMode.SetTitle(fmt.Sprintf("%-30s %s%s", "–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞:", chargeModeStr, chargeIcon))

	t.mMin.SetTitle(fmt.Sprintf("%-32s %3d%%", "–ú–∏–Ω. –ø–æ—Ä–æ–≥:", minThreshold))
	t.mMax.SetTitle(fmt.Sprintf("%-32s %3d%%", "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:", maxThreshold))

	t.mCycles.SetTitle(fmt.Sprintf("%-31s %4d", "–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞:", info.CycleCount))
	t.mHealth.SetTitle(fmt.Sprintf("%-27s %3d%%", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:", info.HealthPercent))
}

// getBatteryIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
func getBatteryIcon(percent int, isCharging bool) string {
	if isCharging {
		return "üîå"
	}
	switch {
	case percent <= 10:
		return "üî¥"
	case percent <= 20:
		return "üü†"
	case percent <= 40:
		return "üü°"
	case percent <= 60:
		return "üîµ" // –°–∏–Ω–∏–π –∫—Ä—É–≥
	case percent <= 80:
		return "üü¢"
	case percent <= 100:
		return "üü§"
	default:
		return "üü£"
	}
}

// onReady –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π.
func (t *Tray) onReady() {
	systray.SetIcon(getAppIconFromFile())
	systray.SetTitle("üëÄ")
	systray.SetTooltip("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ macbat")

	// --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é ---
	t.mCurrent = systray.AddMenuItem("–ó–∞–≥—Ä—É–∑–∫–∞...", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏")
	t.mChargeMode = systray.AddMenuItem("–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞: ...", "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∑–∞—Ä—è–¥–∞")
	systray.AddSeparator()
	t.mMin = systray.AddMenuItem("–ú–∏–Ω. –ø–æ—Ä–æ–≥: ...", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥")
	t.mMax = systray.AddMenuItem("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: ...", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥")
	systray.AddSeparator()
	t.mCycles = systray.AddMenuItem("–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞: ...", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏")
	t.mHealth = systray.AddMenuItem("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏: ...", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞")
	systray.AddSeparator()

	mConfig := systray.AddMenuItem("–û—Ç–∫—Ä—ã—Ç—å config.json", "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	mLogs := systray.AddMenuItem("–û—Ç–∫—Ä—ã—Ç—å macbat.log", "–û—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

	// --- –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" ---
	systray.AddSeparator()
	mQuit := systray.AddMenuItem("–í—ã—Ö–æ–¥", "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
	configUpdateChan := make(chan *config.Config)
	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ —Ñ–∞–π–ª–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ.
	go config.Watch(paths.ConfigPath(), configUpdateChan, t.log)

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏) –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥.
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é.
	t.updateMenu()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
	for {
		select {
		// –°–æ–±—ã—Ç–∏–µ 1: –ü–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.
		case newCfg, ok := <-configUpdateChan:
			if !ok {
				t.log.Debug("–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
				return
			}
			t.log.Info("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é...")
			t.updateMu.Lock()
			t.conf = newCfg
			t.updateMu.Unlock()
			t.updateMenu()

		// –°–æ–±—ã—Ç–∏–µ 2: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
		case <-ticker.C:
			t.updateMenu()

		case <-t.mCycles.ClickedCh:
			dlgs.Info("–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞", "–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ—É—Ç–±—É–∫–∞—Ö —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏ –º–æ–≥—É—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å 1000 –∏ –±–æ–ª–µ–µ.")

		case <-t.mHealth.ClickedCh:
			dlgs.Info("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã.")

		// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ–¥–º–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" ---
		case <-mConfig.ClickedCh:
			if err := paths.OpenFileOrDir(paths.ConfigPath()); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
			}

		case <-mLogs.ClickedCh:
			if err := paths.OpenFileOrDir(paths.LogPath()); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤.")
			}

		// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø–æ—Ä–æ–≥–∏ ---
		case <-t.mMin.ClickedCh:
			t.handleThresholdChange("min")

		case <-t.mMax.ClickedCh:
			t.handleThresholdChange("max")

		// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–í—ã—Ö–æ–¥"
		case <-mQuit.ClickedCh:
			if confirmed, err := dlgs.Question("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", true); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ.")
			} else if confirmed {
				t.log.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
				t.bgManager.Kill("--background")
				if _, err := monitor.UnloadAgent(t.log); err != nil {
					dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞: "+err.Error())
				}
				systray.Quit()
				return
			}
		}
	}
}

// handleThresholdChange –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤.
func (t *Tray) handleThresholdChange(mode string) {
	var title, prompt, currentValStr string
	var currentVal int

	t.log.Line()

	sunMessage := "–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
	if mode == "min" {
		title = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (0-100).\n" + sunMessage
		currentVal = t.conf.MinThreshold
	} else {
		title = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (0-100).\n" + sunMessage
		currentVal = t.conf.MaxThreshold
	}
	t.log.Info(fmt.Sprintf("–ú–µ–Ω—è–µ–º %s...", strings.ToLower(mode)))
	currentValStr = strconv.Itoa(currentVal)

	newValStr, ok, err := dlgs.Entry(title, prompt, currentValStr)
	if err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ.")
		return
	}
	if !ok {
		t.log.Debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∞'")
		return
	}

	newVal, err := strconv.Atoi(newValStr)
	if err != nil {
		t.log.Debug("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		dlgs.Error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
	if mode == "min" {
		if newVal < 0 || newVal >= t.conf.MaxThreshold {
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ %d.", t.conf.MaxThreshold-1))
			return
		}
		t.conf.MinThreshold = newVal
	} else { // max
		if newVal <= t.conf.MinThreshold || newVal > 100 {
			t.log.Debug(fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", t.conf.MinThreshold+1))
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", t.conf.MinThreshold+1))
			return
		}
		t.conf.MaxThreshold = newVal
	}

	t.log.Info(fmt.Sprintf("%s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ %d.", mode, newVal))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := t.cfgManager.Save(t.conf); err != nil {
		t.log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
		dlgs.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: "+err.Error())
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
		t.updateMenu()
	}
}

//go:embed sys-tray-icon.png
var iconData []byte

func getAppIconFromFile() []byte {
	return iconData
}
