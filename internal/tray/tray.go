// –ü–∞–∫–µ—Ç tray —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
package tray

import (
	_ "embed"
	"fmt"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/qzeleza/macbat/internal/background"
	"github.com/qzeleza/macbat/internal/battery"
	"github.com/qzeleza/macbat/internal/config"
	"github.com/qzeleza/macbat/internal/logger"
	"github.com/qzeleza/macbat/internal/monitor"
	"github.com/qzeleza/macbat/internal/paths"
	"github.com/qzeleza/macbat/internal/utils"
	"github.com/qzeleza/macbat/internal/version"

	"github.com/gen2brain/dlgs"
	"github.com/getlantern/systray"
)

// Tray —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫–æ–π –∏ –º–µ–Ω—é –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ.
type Tray struct {
	log               *logger.Logger
	cfg               *config.Config
	cfgManager        *config.Manager
	bgManager         *background.Manager
	mChargeMode       *systray.MenuItem
	mCurrent          *systray.MenuItem
	mMin              *systray.MenuItem
	mMax              *systray.MenuItem
	mCycles           *systray.MenuItem
	mHealth           *systray.MenuItem
	mCheckCharging    *systray.MenuItem
	mCheckDischarging *systray.MenuItem
	mMaxNotifications *systray.MenuItem
	mSettings         *systray.MenuItem
	mConfig           *systray.MenuItem
	mLogs             *systray.MenuItem
	timeToFullCharge  *systray.MenuItem
	timeToEmptyCharge *systray.MenuItem
	mVersion          *systray.MenuItem
	updateMu          sync.Mutex
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Tray.
func New(appLog *logger.Logger, cfg *config.Config, cfgManager *config.Manager, bgManager *background.Manager) *Tray {
	return &Tray{
		log:        appLog,
		cfg:        cfg,
		cfgManager: cfgManager,
		bgManager:  bgManager,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç GUI-–∞–≥–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ.
func (t *Tray) Start() {
	systray.Run(t.onReady, t.onExit)
}

// onExit –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ systray.
func (t *Tray) onExit() {
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
}

// onReady –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ, —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç
// –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–æ–≤, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.
func (t *Tray) onReady() {

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–µ–Ω—é
	systray.SetTitle("üîãüëÄ") // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏
	systray.SetTooltip("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ macbat")

	// --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é ---
	t.mVersion = systray.AddMenuItem("–í–µ—Ä—Å–∏—è ...", "–í–µ—Ä—Å–∏—è macbat")
	t.mVersion.Disable()
	systray.AddSeparator()
	// –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
	t.mChargeMode = systray.AddMenuItem("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ...", "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∑–∞—Ä—è–¥–∞")
	systray.AddSeparator()

	// --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ä—è–¥–∫–∏/—Ä–∞–∑—Ä—è–¥–∫–∏ ---
	// –¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏
	t.mCurrent = systray.AddMenuItem("–ó–∞–≥—Ä—É–∑–∫–∞...", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏")
	t.timeToFullCharge = systray.AddMenuItem("–í—Ä–µ–º—è –¥–æ –ø–æ–ª–Ω–æ–π –∑–∞—Ä—è–¥–∫–∏ ...", "–†–∞—Å—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ 100% –∑–∞—Ä—è–¥–∞")
	t.timeToEmptyCharge = systray.AddMenuItem("–í—Ä–µ–º—è –¥–æ –ø–æ–ª–Ω–æ–π —Ä–∞–∑—Ä—è–¥–∫–∏ ...", "–†–∞—Å—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ 0% –∑–∞—Ä—è–¥–∞")
	t.timeToEmptyCharge.Hide()
	t.timeToFullCharge.Hide()

	// --- –ü—É–Ω–∫—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ ---
	systray.AddSeparator()
	t.mMin = systray.AddMenuItem("–ú–∏–Ω. –ø–æ—Ä–æ–≥ ...", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥")
	t.mMax = systray.AddMenuItem("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥ ...", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥")
	systray.AddSeparator()

	// --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞—Ç–∞—Ä–µ–∏ ---
	systray.AddSeparator()
	t.mCycles = systray.AddMenuItem("–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞ ...", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏")
	t.mHealth = systray.AddMenuItem("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏ ...", "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞")
	systray.AddSeparator()

	// --- –ü–æ–¥–º–µ–Ω—é –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
	t.mSettings = systray.AddMenuItem("–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
	t.mCheckCharging = t.mSettings.AddSubMenuItem("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞—Ä—è–¥–∫–µ", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ–≥–¥–∞ –±–∞—Ç–∞—Ä–µ—è –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è")
	t.mCheckDischarging = t.mSettings.AddSubMenuItem("–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—è–¥–∫–µ", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–æ–≥–¥–∞ –±–∞—Ç–∞—Ä–µ—è —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è")
	t.mMaxNotifications = t.mSettings.AddSubMenuItem("–ß–∏—Å–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤")

	// --- –ü–æ–¥–º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∂—É—Ä–Ω–∞–ª–∞ ---
	t.mSettings = systray.AddMenuItem("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∂—É—Ä–Ω–∞–ª", "–û—Ç–∫—Ä—ã—Ç—å")
	t.mConfig = t.mSettings.AddSubMenuItem("–û—Ç–∫—Ä—ã—Ç—å config.json", "–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
	t.mLogs = t.mSettings.AddSubMenuItem("–û—Ç–∫—Ä—ã—Ç—å macbat.log", "–û—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

	// --- –ö–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" ---
	systray.AddSeparator()
	mQuit := systray.AddMenuItem("–í—ã—Ö–æ–¥", "–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	go func() {
		runtime.LockOSThread()                    // ‚ûä —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞ –≤ –æ–¥–Ω–æ–º –û–°-–ø–æ—Ç–æ–∫–µ
		ticker := time.NewTicker(5 * time.Second) // ‚ûã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
		defer ticker.Stop()                       // ‚ûå –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–∫–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω—ã

		for range ticker.C {
			t.updateMenu() // ‚ûã –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ IOKit –≤ ¬´–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º¬ª –ø–æ—Ç–æ–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
		}

	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
	go t.handleMenuClicks(t.mSettings, t.mLogs, t.mConfig, mQuit)
}

// updateMenu –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
// –±–∞—Ç–∞—Ä–µ–∏, –ø–æ—Ä–æ–≥–∞—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
func (t *Tray) updateMenu() {
	// –ó–∞—â–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
	t.updateMu.Lock()
	defer t.updateMu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
	info, err := battery.GetBatteryInfo()
	if err != nil {
		t.mCurrent.SetTitle("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∑–∞—Ä—è–¥–∫–∏
	chargeModeStr := "–ù–æ—É—Ç–±—É–∫ –ø–∏—Ç–∞–µ—Ç—Å—è –æ—Ç –±–∞—Ç–∞—Ä–µ–∏"
	chargeModeIcon := "ü™´"
	if info.IsCharging {
		chargeModeStr = "–ù–æ—É—Ç–±—É–∫ –∑–∞—Ä—è–∂–∞–µ–º –æ—Ç —Å–µ—Ç–∏"
		chargeModeIcon = "üîå"
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	minThreshold := t.cfg.MinThreshold
	maxThreshold := t.cfg.MaxThreshold

	t.mVersion.SetTitle("–í–µ—Ä—Å–∏—è macbat " + version.Version)
	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –±–∞—Ç–∞—Ä–µ–∏
	icon := getBatteryIcon(info.CurrentCapacity, info.IsCharging)
	t.mChargeMode.SetTitle(fmt.Sprintf("%-29s %-4s", chargeModeStr, chargeModeIcon))

	t.mCurrent.SetTitle(fmt.Sprintf("%-29s %4d%%  %-4s", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥", info.CurrentCapacity, icon))
	if info.IsCharging {
		t.timeToFullCharge.SetTitle(fmt.Sprintf("%-27s  %-5s", "–î–æ –ø–æ–ª–Ω–æ–≥–æ –∑–∞—Ä—è–¥–∞", utils.FormatTimeToColonHMS(info.TimeToFull)))
		t.timeToEmptyCharge.Hide()
		t.timeToFullCharge.Show()
	} else {
		t.timeToEmptyCharge.SetTitle(fmt.Sprintf("%-26s  %-5s", "–î–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞", utils.FormatTimeToColonHMS(info.TimeToEmpty)))
		t.timeToFullCharge.Hide()
		t.timeToEmptyCharge.Show()
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥ –≤ –ª–æ–≥
	t.log.Info(fmt.Sprintf("–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: %d%%", info.CurrentCapacity))

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Ä–æ–≥–æ–≤
	minIndicator := getMinThresholdIndicator(minThreshold)
	maxIndicator := getMaxThresholdIndicator(maxThreshold)

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
	t.mMin.SetTitle(fmt.Sprintf("%-34s %4d%%  %s", "–ú–∏–Ω. –ø–æ—Ä–æ–≥", minThreshold, minIndicator))
	t.mMax.SetTitle(fmt.Sprintf("%-33s %4d%%  %s", "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥", maxThreshold, maxIndicator))

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
	healthIndicator := getHealthIndicator(info.HealthPercent)
	cyclesIndicator := getCyclesIndicator(info.CycleCount)
	t.mCycles.SetTitle(fmt.Sprintf("%-32s %4d  %s", "–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞", info.CycleCount, cyclesIndicator))
	t.mHealth.SetTitle(fmt.Sprintf("%-28s %4d%%  %s", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏", info.HealthPercent, healthIndicator))

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
	t.mCheckCharging.SetTitle(fmt.Sprintf("%-36s %4d —Å.", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞—Ä—è–¥–∫–µ", t.cfg.CheckIntervalWhenCharging))
	t.mCheckDischarging.SetTitle(fmt.Sprintf("%-35s %4d —Å.", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ —Ä–∞–∑—Ä—è–¥–∫–µ", t.cfg.CheckIntervalWhenDischarging))
	t.mMaxNotifications.SetTitle(fmt.Sprintf("%-45s %4d —É–≤.", "–ß–∏—Å–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", t.cfg.MaxNotifications))
}

// getMinThresholdIndicator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
func getMinThresholdIndicator(threshold int) string {
	switch {
	case threshold <= 10:
		return "üî¥" // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ0
	case threshold >= 11 || threshold <= 20:
		return "üü°" // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
	case threshold <= 28:
		return "üü¢" // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
	default:
		return "üî¥" // –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
	}
}

// getMaxThresholdIndicator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
func getMaxThresholdIndicator(threshold int) string {
	switch {
	case threshold <= 70:
		return "üî¥" // –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
	case threshold <= 81:
		return "üü¢" // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
	case threshold <= 90:
		return "üü°" // –ù–æ—Ä–º–∞–ª—å–Ω–æ
	default:
		return "üî¥" // –ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
	}
}

// getHealthIndicator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏.
func getHealthIndicator(health int) string {
	switch {
	case health > 90:
		return "üü¢" // –û—Ç–ª–∏—á–Ω–æ
	case health > 70:
		return "üü°" // –ù–æ—Ä–º–∞–ª—å–Ω–æ
	default:
		return "üî¥" // –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
	}
}

// getCyclesIndicator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è —Ü–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞.
func getCyclesIndicator(cycles int) string {
	switch {
	case cycles < 300:
		return "üü¢" // –ù–∏–∑–∫–æ–µ
	case cycles < 700:
		return "üü°" // –°—Ä–µ–¥–Ω–µ–µ
	default:
		return "üî¥" // –í—ã—Å–æ–∫–æ–µ
	}
}

// getBatteryIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
func getBatteryIcon(percent int, isCharging bool) string {
	if isCharging {
		return "üîå"
	}
	switch {
	case percent <= 10:
		return "üî¥"
	case percent <= 20:
		return "üü†"
	case percent <= 40:
		return "üü°"
	case percent <= 60:
		return "üîµ" // –°–∏–Ω–∏–π –∫—Ä—É–≥
	case percent <= 80:
		return "üü¢"
	case percent <= 100:
		return "üü§"
	default:
		return "üü£"
	}
}

// handleMenuClicks –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é.
//
// @param mSettings - –ø—É–Ω–∫—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
// @param mLogs - –ø—É–Ω–∫—Ç "–õ–æ–≥–∏"
// @param mConfig - –ø—É–Ω–∫—Ç "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
// @param mQuit - –ø—É–Ω–∫—Ç "–í—ã—Ö–æ–¥"
//
// handleMenuClicks —è–≤–ª—è–µ—Ç—Å—è goroutin'–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã
// –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é.
func (t *Tray) handleMenuClicks(mSettings, mLogs, mConfig, mQuit *systray.MenuItem) {

	for {
		select {
		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è" ---
		case <-t.mConfig.ClickedCh:
			if err := paths.OpenFileOrDir(paths.ConfigPath()); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
			}

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–õ–æ–≥–∏" ---
		case <-t.mLogs.ClickedCh:
			if err := paths.OpenFileOrDir(paths.LogPath()); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤.")
			}

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏" ---
		case <-t.mHealth.ClickedCh:
			dlgs.Info("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–æ—É—Ç–±—É–∫–∞—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –∏–∑–Ω–æ—Å–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 90%, —Ç–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 50%, —Ç–æ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –∑–∞–º–µ–Ω–æ–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞" ---
		case <-t.mCycles.ClickedCh:
			dlgs.Info("–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞", "–¶–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–µ—Ä–µ–∑–∞—Ä—è–¥–æ–∫. –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 500 —Ü–∏–∫–ª–æ–≤, —Ç–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1000, —Ç–æ –ø–æ—Ä–∞ –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –∑–∞–º–µ–Ω–æ–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥" ---
		case <-t.mMin.ClickedCh:
			t.handleThresholdChange("min")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥" ---
		case <-t.mMax.ClickedCh:
			t.handleThresholdChange("max")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∑–∞—Ä—è–¥–∫–∞)" ---
		case <-t.mCheckCharging.ClickedCh:
			t.handleIntegerConfigChange("check_interval_charging", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∑–∞—Ä—è–¥–∫–∞)", "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–∞–∑—Ä—è–¥–∫–∞)" ---
		case <-t.mCheckDischarging.ClickedCh:
			t.handleIntegerConfigChange("check_interval_discharging", "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ä–∞–∑—Ä—è–¥–∫–∞)", "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")

		// --- –í—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" ---
		case <-t.mMaxNotifications.ClickedCh:
			t.handleIntegerConfigChange("max_notifications", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")

		// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–í—ã—Ö–æ–¥"
		case <-mQuit.ClickedCh:
			if confirmed, err := dlgs.Question("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", true); err != nil {
				dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ.")
			} else if confirmed {
				t.log.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –≤—ã—Ö–æ–¥. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
				t.bgManager.Kill("--background")
				if _, err := monitor.CommandAgentService(t.log, "bootout"); err != nil {
					dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å –∞–≥–µ–Ω—Ç–∞: "+err.Error())
				}
				systray.Quit()
				return
			}
		}
	}
}

// handleIntegerConfigChange –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
//
// @param key - –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
// @param title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
// @param prompt - —Ç–µ–∫—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ
//
// –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏—Ç –≤–≤–æ–¥, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ.
// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, —Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.
// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞.
func (t *Tray) handleIntegerConfigChange(key, title, prompt string) {
	var currentVal int
	switch key {
	case "check_interval_charging":
		currentVal = t.cfg.CheckIntervalWhenCharging
	case "check_interval_discharging":
		currentVal = t.cfg.CheckIntervalWhenDischarging
	case "max_notifications":
		currentVal = t.cfg.MaxNotifications
	default:
		dlgs.Error(title, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
		return
	}

	input, confirmed, err := dlgs.Entry(title, prompt, strconv.Itoa(currentVal))
	if err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ: "+err.Error())
		return
	}
	if !confirmed {
		t.log.Debug("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
		return
	}

	newValue, err := strconv.Atoi(input)
	if err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
		return
	}

	switch key {
	case "check_interval_charging":
		t.cfg.CheckIntervalWhenCharging = newValue
	case "check_interval_discharging":
		t.cfg.CheckIntervalWhenDischarging = newValue
	case "max_notifications":
		t.cfg.MaxNotifications = newValue
	}

	if err := t.cfgManager.Save(t.cfg); err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: "+err.Error())
		t.log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
	} else {
		t.log.Info(fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %d.", newValue))
	}
	t.updateMenu()
}

// handleThresholdChange –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤.
//
// –î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞, –∫–æ—Ç–æ—Ä–æ–µ
// –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
func (t *Tray) handleThresholdChange(mode string) {
	var title, prompt, currentValStr string
	var currentVal int

	if mode == "min" {
		title = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∞ (0-100):"
		currentVal = t.cfg.MinThreshold
	} else {
		title = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (0-100).\n"
		currentVal = t.cfg.MaxThreshold
	}
	t.log.Info(fmt.Sprintf("–ú–µ–Ω—è–µ–º %s...", strings.ToLower(mode)))
	currentValStr = strconv.Itoa(currentVal)

	newValStr, ok, err := dlgs.Entry(title, prompt, currentValStr)
	if err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ.")
		return
	}
	if !ok {
		t.log.Debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∞'")
		return
	}

	newVal, err := strconv.Atoi(newValStr)
	if err != nil {
		t.log.Debug("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		dlgs.Error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
	if mode == "min" {
		if newVal < 0 || newVal >= t.cfg.MaxThreshold {
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ %d.", t.cfg.MaxThreshold-1))
			return
		}
		t.cfg.MinThreshold = newVal
	} else { // max
		if newVal <= t.cfg.MinThreshold || newVal > 100 {
			t.log.Debug(fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", t.cfg.MinThreshold+1))
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", t.cfg.MinThreshold+1))
			return
		}
		t.cfg.MaxThreshold = newVal
	}

	t.log.Info(fmt.Sprintf("%s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ %d.", mode, newVal))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := t.cfgManager.Save(t.cfg); err != nil {
		t.log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
		dlgs.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: "+err.Error())
	} else {
		t.log.Info("–£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ " + mode + "= " + strconv.Itoa(newVal) + ".")
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
		t.updateMenu()
	}
}
