// FILE: test_battery.go
// –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

package battery

import (
	"fmt"
	"strings"
	"sync"
	"testing"
	"time"

	"macbat/internal/config"
)

// –ú–æ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
type MockNotificationSystem struct {
	notifications []string
	mu            sync.Mutex
}

func (m *MockNotificationSystem) ShowNotification(title, message string) {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.notifications = append(m.notifications, fmt.Sprintf("%s: %s", title, message))
}

func (m *MockNotificationSystem) GetNotifications() []string {
	m.mu.Lock()
	defer m.mu.Unlock()
	return append([]string{}, m.notifications...)
}

func (m *MockNotificationSystem) Clear() {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.notifications = nil
}

func (m *MockNotificationSystem) Count() int {
	m.mu.Lock()
	defer m.mu.Unlock()
	return len(m.notifications)
}

// –ú–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ
type MockBatteryInfoProvider struct {
	currentInfo BatteryInfo
	mu          sync.RWMutex
}

func (m *MockBatteryInfoProvider) SetBatteryInfo(info BatteryInfo) {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.currentInfo = info
}

func (m *MockBatteryInfoProvider) GetBatteryInfo() (BatteryInfo, error) {
	m.mu.RLock()
	defer m.mu.RUnlock()
	return m.currentInfo, nil
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º getBatteryInfo –¥–ª—è —Ç–µ—Å—Ç–æ–≤
var mockBatteryProvider *MockBatteryInfoProvider
var mockNotificationSystem *MockNotificationSystem

func init() {
	mockBatteryProvider = &MockBatteryInfoProvider{}
	mockNotificationSystem = &MockNotificationSystem{}
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
func getBatteryInfoForTest() (*BatteryInfo, error) {
	info, err := mockBatteryProvider.GetBatteryInfo()
	return &info, err
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
func checkBatteryStateForTest(cfg *config.Config, lastNotificationLevel *int, lastChargingState *bool) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
	info, err := getBatteryInfoForTest()
	if err != nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ä—è–¥–∫–∏
	chargingStateChanged := *lastChargingState != info.IsCharging
	*lastChargingState = info.IsCharging

	// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ä—è–¥–∫–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	if chargingStateChanged {
		*lastNotificationLevel = 0
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è "—É–º–Ω—ã—Ö" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
	notificationLevel := info.CurrentCapacity / 5
	shouldNotify := (info.CurrentCapacity%5 == 0) && (notificationLevel != *lastNotificationLevel)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	switch {
	case info.CurrentCapacity <= cfg.MinThreshold:
		if !info.IsCharging {
			// –ï—Å–ª–∏ –∑–∞—Ä—è–¥–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			if shouldNotify || chargingStateChanged {
				message := fmt.Sprintf("üîã –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: %d%%\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!", info.CurrentCapacity)
				mockNotificationSystem.ShowNotification("MacBat", message)
			}
		} else {
			// –ï—Å–ª–∏ –∑–∞—Ä—è–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			*lastNotificationLevel = 0
		}

	case info.CurrentCapacity >= cfg.MaxThreshold:
		if info.IsCharging {
			// –ï—Å–ª–∏ –∑–∞—Ä—è–¥–∫–∞ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			if shouldNotify || chargingStateChanged {
				message := fmt.Sprintf("üîå –í—ã—Å–æ–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏: %d%%\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.", info.CurrentCapacity)
				mockNotificationSystem.ShowNotification("MacBat", message)
			}
		} else {
			// –ï—Å–ª–∏ –∑–∞—Ä—è–¥–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			*lastNotificationLevel = 0
		}

	default:
		*lastNotificationLevel = 0
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	if shouldNotify {
		*lastNotificationLevel = notificationLevel
	}
}

// TestLowBatteryThreshold —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –Ω–∏–∑–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞
func TestLowBatteryThreshold(t *testing.T) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	tests := []struct {
		name            string
		batteryLevel    int
		isCharging      bool
		expectNotify    bool
		notificationMsg string
	}{
		{
			name:            "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–µ–∑ –∑–∞—Ä—è–¥–∫–∏ - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å",
			batteryLevel:    15,
			isCharging:      false,
			expectNotify:    true,
			notificationMsg: "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏",
		},
		{
			name:         "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ —Å –∑–∞—Ä—è–¥–∫–æ–π - –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å",
			batteryLevel: 15,
			isCharging:   true,
			expectNotify: false,
		},
		{
			name:         "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞—Ä—è–¥ - –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å",
			batteryLevel: 50,
			isCharging:   false,
			expectNotify: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockNotificationSystem.Clear()
			lastNotificationLevel = 0
			lastChargingState = false

			mockBatteryProvider.SetBatteryInfo(BatteryInfo{
				CurrentCapacity: tt.batteryLevel,
				IsCharging:      tt.isCharging,
			})

			checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)

			notifications := mockNotificationSystem.GetNotifications()
			if tt.expectNotify {
				if len(notifications) == 0 {
					t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –µ–≥–æ –Ω–µ –±—ã–ª–æ")
				} else if !strings.Contains(notifications[0], tt.notificationMsg) {
					t.Errorf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: %s", notifications[0])
				}
			} else {
				if len(notifications) > 0 {
					t.Errorf("–ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: %s", notifications[0])
				}
			}
		})
	}
}

// TestHighBatteryThreshold —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞
func TestHighBatteryThreshold(t *testing.T) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	tests := []struct {
		name            string
		batteryLevel    int
		isCharging      bool
		expectNotify    bool
		notificationMsg string
	}{
		{
			name:            "–í—ã—Å–æ–∫–∏–π –∑–∞—Ä—è–¥ —Å –∑–∞—Ä—è–¥–∫–æ–π - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å",
			batteryLevel:    85,
			isCharging:      true,
			expectNotify:    true,
			notificationMsg: "–í—ã—Å–æ–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏",
		},
		{
			name:         "–í—ã—Å–æ–∫–∏–π –∑–∞—Ä—è–¥ –±–µ–∑ –∑–∞—Ä—è–¥–∫–∏ - –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å",
			batteryLevel: 85,
			isCharging:   false,
			expectNotify: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockNotificationSystem.Clear()
			lastNotificationLevel = 0
			lastChargingState = false

			mockBatteryProvider.SetBatteryInfo(BatteryInfo{
				CurrentCapacity: tt.batteryLevel,
				IsCharging:      tt.isCharging,
			})

			checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)

			notifications := mockNotificationSystem.GetNotifications()
			if tt.expectNotify {
				if len(notifications) == 0 {
					t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –µ–≥–æ –Ω–µ –±—ã–ª–æ")
				} else if !strings.Contains(notifications[0], tt.notificationMsg) {
					t.Errorf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç: %s", notifications[0])
				}
			} else {
				if len(notifications) > 0 {
					t.Errorf("–ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: %s", notifications[0])
				}
			}
		})
	}
}

// TestSmartNotificationInterval —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func TestSmartNotificationInterval(t *testing.T) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	// –¢–µ—Å—Ç: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Ä–æ–≤–Ω—è—Ö –∫—Ä–∞—Ç–Ω—ã—Ö 5
	testCases := []struct {
		level        int
		shouldNotify bool
	}{
		{15, true},  // 15 % 5 == 0, –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
		{14, false}, // 14 % 5 != 0, –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
		{13, false}, // 13 % 5 != 0, –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
		{10, true},  // 10 % 5 == 0, –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
		{9, false},  // 9 % 5 != 0, –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
		{5, true},   // 5 % 5 == 0, –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
	}

	for _, tc := range testCases {
		t.Run(fmt.Sprintf("Level_%d", tc.level), func(t *testing.T) {
			mockNotificationSystem.Clear()
			lastNotificationLevel = 0
			lastChargingState = false

			mockBatteryProvider.SetBatteryInfo(BatteryInfo{
				CurrentCapacity: tc.level,
				IsCharging:      false,
			})

			checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)

			notifications := mockNotificationSystem.GetNotifications()
			if tc.shouldNotify {
				if len(notifications) == 0 {
					t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è %d, –Ω–æ –µ–≥–æ –Ω–µ –±—ã–ª–æ", tc.level)
				}
			} else {
				if len(notifications) > 0 {
					t.Errorf("–ù–µ –æ–∂–∏–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è %d, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ: %s", tc.level, notifications[0])
				}
			}
		})
	}
}

// TestNoRepeatNotifications —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func TestNoRepeatNotifications(t *testing.T) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	mockNotificationSystem.Clear()
	lastNotificationLevel = 0
	lastChargingState = false

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–µ–∑ –∑–∞—Ä—è–¥–∫–∏
	mockBatteryProvider.SetBatteryInfo(BatteryInfo{
		CurrentCapacity: 15,
		IsCharging:      false,
	})

	// –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å
	checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)
	if mockNotificationSystem.Count() != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ: %d", mockNotificationSystem.Count())
	}

	// –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ç–µ–º –∂–µ —É—Ä–æ–≤–Ω–µ–º - –Ω–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
	checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)
	if mockNotificationSystem.Count() != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞), –ø–æ–ª—É—á–µ–Ω–æ: %d", mockNotificationSystem.Count())
	}
}

// TestChargingStateChange —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—Ä—è–¥–∫–∏
func TestChargingStateChange(t *testing.T) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	mockNotificationSystem.Clear()
	lastNotificationLevel = 0
	lastChargingState = true // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞—Ä—è–¥–∫–∏

	// –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥, –∑–∞—Ä—è–¥–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è
	mockBatteryProvider.SetBatteryInfo(BatteryInfo{
		CurrentCapacity: 15,
		IsCharging:      false,
	})

	checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)

	// –î–æ–ª–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ –∫–æ–≥–¥–∞ –∑–∞—Ä—è–¥–∫–∞ –æ—Ç–∫–ª—é—á–∏–ª–∞—Å—å
	if mockNotificationSystem.Count() != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞—Ä—è–¥–∫–∏, –ø–æ–ª—É—á–µ–Ω–æ: %d", mockNotificationSystem.Count())
	}

	notifications := mockNotificationSystem.GetNotifications()
	if !strings.Contains(notifications[0], "–ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏") {
		t.Errorf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏–∑–∫–æ–º –∑–∞—Ä—è–¥–µ: %s", notifications[0])
	}
}

// TestPeriodicCheckInterval —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ - —É–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
func TestPeriodicCheckInterval(t *testing.T) {
	cfg := &config.Config{
		MinThreshold:  20,
		MaxThreshold:  80,
		CheckInterval: 1, // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
	}

	mockNotificationSystem.Clear()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	mockBatteryProvider.SetBatteryInfo(BatteryInfo{
		CurrentCapacity: 15,
		IsCharging:      false,
	})

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
	done := make(chan bool, 1) // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
	var checkCount int
	var mu sync.Mutex

	go func() {
		var lastNotificationLevel int
		var lastChargingState bool

		ticker := time.NewTicker(time.Duration(cfg.CheckInterval) * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)
				mu.Lock()
				checkCount++
				mu.Unlock()
			case <-done:
				return
			}
		}
	}()

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å 3 –¥–æ 2.5 —Å–µ–∫—É–Ω–¥
	time.Sleep(2500 * time.Millisecond) // 2.5 —Å–µ–∫—É–Ω–¥—ã
	done <- true

	mu.Lock()
	finalCheckCount := checkCount
	mu.Unlock()

	// –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å (2-4) –¥–æ (1-5) –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
	if finalCheckCount < 1 || finalCheckCount > 5 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1-5 –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ 2.5 —Å–µ–∫—É–Ω–¥—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 —Å–µ–∫, –ø–æ–ª—É—á–µ–Ω–æ: %d", finalCheckCount)
	} else {
		t.Logf("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ %d –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ 2.5 —Å–µ–∫—É–Ω–¥—ã", finalCheckCount) // –î–û–ë–ê–í–õ–ï–ù–û: —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	}

	// –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è)
	if mockNotificationSystem.Count() != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥, –ø–æ–ª—É—á–µ–Ω–æ: %d", mockNotificationSystem.Count())
	}
}

// TestBatteryInfoStruct —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã BatteryInfo
func TestBatteryInfoStruct(t *testing.T) {
	info := BatteryInfo{
		CurrentCapacity: 75,
		MaxCapacity:     5000,
		DesignCapacity:  5200,
		CycleCount:      150,
		Voltage:         12600,
		Amperage:        -1500,
		IsCharging:      true,
		IsPlugged:       true,
		TimeToEmpty:     0,
		TimeToFull:      45,
		HealthPercent:   96,
	}

	if info.CurrentCapacity != 75 {
		t.Errorf("CurrentCapacity = %d, –æ–∂–∏–¥–∞–ª–æ—Å—å 75", info.CurrentCapacity)
	}

	if !info.IsCharging {
		t.Errorf("IsCharging = %v, –æ–∂–∏–¥–∞–ª–æ—Å—å true", info.IsCharging)
	}

	if !info.IsPlugged {
		t.Errorf("IsPlugged = %v, –æ–∂–∏–¥–∞–ª–æ—Å—å true", info.IsPlugged)
	}

	// –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞—Ç–∞—Ä–µ–∏
	expectedHealth := int(float64(info.MaxCapacity) * 100 / float64(info.DesignCapacity))
	if info.HealthPercent != expectedHealth {
		t.Errorf("HealthPercent = %d, –æ–∂–∏–¥–∞–ª–æ—Å—å %d", info.HealthPercent, expectedHealth)
	}
}

// BenchmarkBatteryCheck –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞—Ç–∞—Ä–µ–∏
func BenchmarkBatteryCheck(b *testing.B) {
	cfg := &config.Config{
		MinThreshold: 20,
		MaxThreshold: 80,
	}

	var lastNotificationLevel int
	var lastChargingState bool

	mockBatteryProvider.SetBatteryInfo(BatteryInfo{
		CurrentCapacity: 15,
		IsCharging:      false,
	})

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		checkBatteryStateForTest(cfg, &lastNotificationLevel, &lastChargingState)
	}
}
