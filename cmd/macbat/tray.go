// –ü–∞–∫–µ—Ç main —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
package main

import (
	_ "embed"
	"fmt"
	"macbat/internal/battery"
	"macbat/internal/config"
	"macbat/internal/logger"
	"macbat/internal/paths"
	"os"
	"strconv"
	"sync"
	"syscall"
	"time"

	"github.com/caseymrm/menuet"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
var (
	appLog      *logger.Logger
	batteryInfo *battery.BatteryInfo
	appConfig   *config.Config
	updateMu    sync.Mutex // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
)

// initTray –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω—é –≤ —Ç—Ä–µ–µ macOS
func initTray() {
	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
	appLog = logger.New(paths.LogPath(), 100, true, false)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfgManager, _ := config.New(appLog, paths.ConfigPath())
	appConfig, _ = cfgManager.Load()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω—é
	ap := menuet.App()
	ap.Name = "MacBat"
	ap.Label = "MacBat"

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	menuState := &menuet.MenuState{
		Title: "MBat",
		// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ, –µ—Å–ª–∏ –±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö
		// –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
	}
	ap.SetMenuState(menuState)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
	ap.Children = menuItems

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
	go startStatusUpdater()

	// –ó–∞–ø—É—Å–∫–∞–µ–º GUI-—Ü–∏–∫–ª
	ap.RunApplication()
}

// menuItems —Å–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
func menuItems() []menuet.MenuItem {
	updateMu.Lock()
	defer updateMu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
	info, err := battery.GetBatteryInfo()
	if err != nil {
		return []menuet.MenuItem{
			{Text: "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"},
			{Type: menuet.Separator},
			{Text: "–í—ã—Ö–æ–¥", Clicked: exitApp},
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
	batteryInfo = info

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	minThreshold := 20
	maxThreshold := 80
	if appConfig != nil {
		minThreshold = appConfig.MinThreshold
		maxThreshold = appConfig.MaxThreshold
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞—Ä—è–¥–∞
	icon := getBatteryIcon(info.CurrentCapacity, info.IsCharging)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤—É—Ö –∫–æ–ª–æ–Ω–æ–∫
	// –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤ —Å—Ç–æ–ª–±–∏–∫ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ —ç—Ç–æ –ª—É—á—à–µ–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å menuet
	currentStatusText := fmt.Sprintf("%d%% %s", info.CurrentCapacity, icon)

	return []menuet.MenuItem{
		{
			// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É–Ω–∫—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —Å—Ç–∞—Ç—É—Å
			Text:     currentStatusText,
			FontSize: 14,
			State:    true, // –û—Ç–º–µ—á–µ–Ω
		},
		{Type: menuet.Separator}, // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
		{
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
			// –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ 20 —Å–∏–º–≤–æ–ª–æ–≤, –≤—Ç–æ—Ä–∞—è –≤—ã—Ä–æ–≤–Ω–µ–Ω–∞ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
			Text:     fmt.Sprintf("%-20s %4d%%", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥:", info.CurrentCapacity),
			FontSize: 13,
		},
		{
			Text:     fmt.Sprintf("%-20s %4d%%", "–ú–∏–Ω. –ø–æ—Ä–æ–≥:", minThreshold),
			FontSize: 13,
		},
		{
			Text:     fmt.Sprintf("%-20s %4d%%", "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:", maxThreshold),
			FontSize: 13,
		},
		{
			Text:     fmt.Sprintf("%-20s %4d", "–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞:", info.CycleCount),
			FontSize: 13,
		},
		{
			Text:     fmt.Sprintf("%-20s %4d%%", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:", info.HealthPercent),
			FontSize: 13,
		},
		{Type: menuet.Separator}, // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
		{Text: "–í—ã—Ö–æ–¥", Clicked: exitApp},
	}
}

// startStatusUpdater –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ–Ω—é
func startStatusUpdater() {
	// –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
	menuet.App().MenuChanged()

	// –ó–∞—Ç–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		menuet.App().MenuChanged()
	}
}

// getBatteryIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
func getBatteryIcon(percent int, isCharging bool) string {
	switch {
	case percent <= 10:
		if isCharging {
			return "üîå‚ö°"
		}
		return "üî¥"
	case percent <= 30:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü†"
	case percent <= 60:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü°"
	default:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü¢"
	}
}

// exitApp –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –Ω–∞ –ø—É–Ω–∫—Ç–µ "–í—ã—Ö–æ–¥"
func exitApp() {
	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
	killBackground()

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã
	time.Sleep(100 * time.Millisecond)
	os.Exit(0)
}

// killBackground –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞—Ç–∞—Ä–µ–∏
func killBackground() {
	pidPath := paths.PIDPath()
	data, err := os.ReadFile(pidPath)
	if err != nil {
		return // —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äì –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç
	}

	pid, _ := strconv.Atoi(string(data))
	p, err := os.FindProcess(pid)
	if err == nil {
		_ = p.Signal(syscall.SIGTERM) // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	}
	_ = os.Remove(pidPath)
}

//go:embed sys-tray-icon.png
var iconData []byte

// getAppIconFromFile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç—Ä–µ–µ
func getAppIconFromFile() []byte {
	return iconData
}
