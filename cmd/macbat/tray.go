// –ü–∞–∫–µ—Ç main —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
package main

import (
	_ "embed"
	"fmt"
	"macbat/internal/battery"
	"macbat/internal/config"
	"macbat/internal/logger"
	"macbat/internal/paths"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode/utf8"

	"github.com/gen2brain/dlgs"
	"github.com/getlantern/systray"
)

// updateMenu –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –≤ —Ç—Ä–µ–µ
var updateMu sync.Mutex // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

func updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode *systray.MenuItem, conf *config.Config) {
	updateMu.Lock()
	defer updateMu.Unlock()

	info, err := battery.GetBatteryInfo()
	if err != nil {
		mCurrent.SetTitle("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
	chargeModeStr := "–†–∞–∑—Ä—è–¥–∫–∞"
	if info.IsCharging {
		chargeModeStr = "–ó–∞—Ä—è–¥–∫–∞"
	}

	workModeStr := "–®—Ç–∞—Ç–Ω—ã–π"
	if modeRun == "test" {
		workModeStr = "–°–∏–º—É–ª—è—Ü–∏—è"
	}

	// --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ---
	labels := []string{
		"–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥:",
		"–ú–∏–Ω. –ø–æ—Ä–æ–≥:",
		"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:",
		"–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞:",
		"–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:",
		"–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞:",
		"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
	}
	maxLength := 0
	for _, label := range labels {
		length := utf8.RuneCountInString(label)
		if length > maxLength {
			maxLength = length
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –±–∞—Ç–∞—Ä–µ–∏
	icon := getBatteryIcon(info.CurrentCapacity, info.IsCharging)
	mCurrent.SetTitle(fmt.Sprintf("%-*s %s %4d%%", maxLength, labels[0], icon, info.CurrentCapacity)) // –¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	minThreshold := 21 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	maxThreshold := 81 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if conf != nil {
		minThreshold = conf.MinThreshold
		maxThreshold = conf.MaxThreshold
	}

	chargeIcon := ""
	if info.IsCharging {
		chargeIcon = "‚ö°"
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
	mChargeMode.SetTitle(fmt.Sprintf("%-21s %s %s", labels[5], chargeModeStr, chargeIcon)) // –†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞
	mWorkMode.SetTitle(fmt.Sprintf("%-20s %s", labels[6], workModeStr))                    // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã

	mMin.SetTitle(fmt.Sprintf("%-21s       %4d%%", labels[1], minThreshold)) // –ú–∏–Ω. –ø–æ—Ä–æ–≥
	mMax.SetTitle(fmt.Sprintf("%-21s       %4d%%", labels[2], maxThreshold)) // –ú–∞–∫—Å. –ø–æ—Ä–æ–≥

	mCycles.SetTitle(fmt.Sprintf("%-22s    %4d", labels[3], info.CycleCount))   // –¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞
	mHealth.SetTitle(fmt.Sprintf("%-20s %4d%%", labels[4], info.HealthPercent)) // –ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏

	log.Info("–î–∞–Ω–Ω—ã–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
}

// getBatteryIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
func getBatteryIcon(percent int, isCharging bool) string {
	// –î–ª—è –∑–∞—Ä—è–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
	if isCharging {
		return "üîå"
	}

	// –î–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∞–∑—Ä—è–¥–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–Ω—ã–µ –∫—Ä—É–≥–∏.
	switch {
	case percent <= 10:
		return "üî¥"
	case percent <= 20:
		return "üü†"
	case percent <= 40:
		return "üü°"
	case percent <= 60:
		return "üîµ" // –°–∏–Ω–∏–π –∫—Ä—É–≥
	case percent <= 80:
		return "üü¢"
	case percent <= 100:
		return "üü§"
	default:
		return "üü£"
	}
}

// onReady –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ
func onReady() {
	iconData := getAppIconFromFile()
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—É—é (template), —á—Ç–æ–±—ã macOS –Ω–µ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–ª –µ—ë.
	systray.SetTitle("–°—Ç—Ä–∞–∂")
	systray.SetIcon(iconData)
	systray.SetTooltip("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏")

	systray.AddSeparator()

	mChargeMode := systray.AddMenuItem("–ó–∞–≥—Ä—É–∑–∫–∞...", "–†–∞–∑—Ä—è–¥–∫–∞ –∏ –∑–∞—Ä—è–¥–∫–∞")
	// mChargeMode.Disable()

	mWorkMode := systray.AddMenuItem("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: --", "–®—Ç–∞—Ç–Ω—ã–π –∏ —Å–∏–º—É–ª—è—Ü–∏—è (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º), –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ñ–ª–∞–≥–æ–º --test")
	// mWorkMode.Disable()

	systray.AddSeparator()

	mCurrent := systray.AddMenuItem("–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: --%", "–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏")
	// mCurrent.Disable()
	systray.AddSeparator()

	mMin := systray.AddMenuItem("–ú–∏–Ω. –ø–æ—Ä–æ–≥: --%", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º —Ä–∞–∑—Ä—è–¥–∫–∏")
	// mMin.Disable()

	mMax := systray.AddMenuItem("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: --%", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏, –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω —Ä–µ–∂–∏–º –∑–∞—Ä—è–¥–∫–∏")
	// mMax.Disable()
	systray.AddSeparator()

	mHealth := systray.AddMenuItem("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏: --%", "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–µ–ø–µ–Ω—å –∏–∑–Ω–æ—Å–∞ –±–∞—Ç–∞—Ä–µ–∏")
	// mHealth.Disable()

	mCycles := systray.AddMenuItem("–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞: --", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏")
	// mCycles.Disable()

	systray.AddSeparator()

	mQuit := systray.AddMenuItem("–í—ã—Ö–æ–¥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	log := logger.New(paths.LogPath(), 100, true, false)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
	cfgManager, _ := config.New(log, paths.ConfigPath())
	conf, _ := cfgManager.Load()

	// –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É,
	// —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI –∏ –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
	go func() {
		time.Sleep(100 * time.Millisecond)
		updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, conf)
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	go func() {
		ticker := time.NewTicker(30 * time.Second)
		defer ticker.Stop()
		for range ticker.C {
			updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, conf)
		}
	}()

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–ª–∏–∫–æ–≤ –ø–æ –º–µ–Ω—é –≤ –æ–¥–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ ---
	go func() {
		for {
			select {

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥"
			case <-mCurrent.ClickedCh:
				dlgs.Warning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥ –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞–≤—à–µ–π—Å—è —ë–º–∫–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—Ç—å –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç 20% –¥–æ 80%.")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
			case <-mWorkMode.ClickedCh:
				dlgs.Warning("–í–Ω–∏–º–∞–Ω–∏–µ", "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–æ–∂–µ—Ç –±—ã—Ç—å —à—Ç–∞—Ç–Ω—ã–º –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–º (—Å–∏–º—É–ª—è—Ü–∏—è). –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–æ–º.")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞"
			case <-mChargeMode.ClickedCh:
				dlgs.Warning("–í–Ω–∏–º–∞–Ω–∏–µ", "–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä –∏–ª–∏ —Ä–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è. –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ç–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è '–ó–∞—Ä—è–¥–∫–∞', –∏–Ω–∞—á–µ ‚Äî '–†–∞–∑—Ä—è–¥–∫–∞'.")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏"
			case <-mHealth.ClickedCh:
				dlgs.Warning("–í–Ω–∏–º–∞–Ω–∏–µ", "–≠—Ç–æ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏ ‚Äî —á–µ–º –Ω–∏–∂–µ, —Ç–µ–º –≤—ã—à–µ –∏–∑–Ω–æ—Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞. –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∏–∂–µ 80% –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–º–µ—Ç–Ω—É—é –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é —ë–º–∫–æ—Å—Ç–∏. –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–µ —Ü–∏–∫–ª—ã –∑–∞—Ä—è–¥–∞.")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞"
			case <-mCycles.ClickedCh:
				dlgs.Warning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ ‚Äî —ç—Ç–æ —Å—É–º–º–∞—Ä–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª–Ω—ã—Ö —Ä–∞–∑—Ä—è–¥–æ–≤/–∑–∞—Ä—è–¥–æ–≤ –±–∞—Ç–∞—Ä–µ–∏. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 1000 —Ü–∏–∫–ª–æ–≤ –¥–æ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è —ë–º–∫–æ—Å—Ç–∏.")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ú–∏–Ω. –ø–æ—Ä–æ–≥"
			case <-mMin.ClickedCh:
				handleThresholdChange(cfgManager, conf, log, mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, "min")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ú–∞–∫—Å. –ø–æ—Ä–æ–≥"
			case <-mMax.ClickedCh:
				handleThresholdChange(cfgManager, conf, log, mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, "max")

			// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–í—ã—Ö–æ–¥"
			case <-mQuit.ClickedCh:
				killBackground()
				systray.Quit()
				time.Sleep(100 * time.Millisecond)
				os.Exit(0)
				return
			}
		}
	}()
}

// handleThresholdChange –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤.
// @param cfgManager - –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
// @param conf - —Ç–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.
// @param menuItems - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
// @param mode - –∫–∞–∫–æ–π –ø–æ—Ä–æ–≥ –º–µ–Ω—è–µ–º ("min" –∏–ª–∏ "max").
func handleThresholdChange(cfgManager *config.Manager, conf *config.Config, log *logger.Logger, mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode *systray.MenuItem, mode string) {
	var title, prompt, currentValStr string
	var currentVal int

	log.Line()

	sunMessage := "–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
	if mode == "min" {
		title = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (0-100).\n" + sunMessage
		currentVal = conf.MinThreshold
	} else {
		title = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥"
		prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ (0-100).\n" + sunMessage
		currentVal = conf.MaxThreshold
	}
	log.Info(fmt.Sprintf("–ú–µ–Ω—è–µ–º %s...", strings.ToLower(mode)))
	currentValStr = strconv.Itoa(currentVal)

	newValStr, ok, err := dlgs.Entry(title, prompt, currentValStr)
	if err != nil {
		dlgs.Error("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ.")
		return
	}
	if !ok {
		log.Debug("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∞'")
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
		return
	}

	newVal, err := strconv.Atoi(newValStr)
	if err != nil {
		log.Debug("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		dlgs.Error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
	if mode == "min" {
		if newVal < 0 || newVal >= conf.MaxThreshold {
			log.Debug(fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ %d.", conf.MaxThreshold-1))
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ %d.", conf.MaxThreshold-1))
			return
		}
		conf.MinThreshold = newVal
	} else { // max
		if newVal <= conf.MinThreshold || newVal > 100 {
			log.Debug(fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", conf.MinThreshold+1))
			dlgs.Error("–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è", fmt.Sprintf("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–∂–¥—É %d –∏ 100.", conf.MinThreshold+1))
			return
		}
		conf.MaxThreshold = newVal
	}

	log.Info(fmt.Sprintf("%s —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ %d.", mode, newVal))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := cfgManager.Save(conf); err != nil {
		log.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
		dlgs.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: "+err.Error())
	} else {
		// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
		updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, conf)
	}
}

//go:embed sys-tray-icon.png
var iconData []byte

func getAppIconFromFile() []byte {
	return iconData
}
