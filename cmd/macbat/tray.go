// –ü–∞–∫–µ—Ç main —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ
package main

import (
	_ "embed"
	"fmt"
	"macbat/internal/battery"
	"macbat/internal/config"
	"macbat/internal/logger"
	"macbat/internal/paths"
	"os"
	"strconv"
	"sync"
	"syscall"
	"time"
	"unicode/utf8"

	"github.com/getlantern/systray"
)

// updateMenu –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –≤ —Ç—Ä–µ–µ
var updateMu sync.Mutex // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

func updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode *systray.MenuItem, conf *config.Config) {
	updateMu.Lock()
	defer updateMu.Unlock()

	info, err := battery.GetBatteryInfo()
	if err != nil {
		mCurrent.SetTitle("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	// --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
	chargeModeStr := "–†–∞–∑—Ä—è–¥–∫–∞"
	if info.IsCharging {
		chargeModeStr = "–ó–∞—Ä—è–¥–∫–∞"
	}

	workModeStr := "–®—Ç–∞—Ç–Ω—ã–π"
	if modeRun == "test" {
		workModeStr = "–°–∏–º—É–ª—è—Ü–∏—è"
	}

	// --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è ---
	labels := []string{
		"–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥:",
		"–ú–∏–Ω. –ø–æ—Ä–æ–≥:",
		"–ú–∞–∫—Å. –ø–æ—Ä–æ–≥:",
		"–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞:",
		"–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏:",
		"–†–µ–∂–∏–º –∑–∞—Ä—è–¥–∞:",
		"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
	}
	maxLength := 0
	for _, label := range labels {
		length := utf8.RuneCountInString(label)
		if length > maxLength {
			maxLength = length
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –±–∞—Ç–∞—Ä–µ–∏
	icon := getBatteryIcon(info.CurrentCapacity, info.IsCharging)
	mCurrent.SetTitle(fmt.Sprintf("%-*s %s %4d%%", maxLength, labels[0], icon, info.CurrentCapacity))

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	minThreshold := 21 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	maxThreshold := 81 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if conf != nil {
		minThreshold = conf.MinThreshold
		maxThreshold = conf.MaxThreshold
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å—Ç—É–ø–∞
	mChargeMode.SetTitle(fmt.Sprintf("%-21s %s", labels[5], chargeModeStr))
	mWorkMode.SetTitle(fmt.Sprintf("%-20s %s", labels[6], workModeStr))

	mMin.SetTitle(fmt.Sprintf("%-21s       %4d%%", labels[1], minThreshold))
	mMax.SetTitle(fmt.Sprintf("%-21s       %4d%%", labels[2], maxThreshold))

	mCycles.SetTitle(fmt.Sprintf("%-22s    %4d", labels[3], info.CycleCount))
	mHealth.SetTitle(fmt.Sprintf("%-20s %4d%%", labels[4], info.HealthPercent))

}

// getBatteryIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–∞—Ä—è–¥–∞
func getBatteryIcon(percent int, isCharging bool) string {
	switch {
	case percent <= 10:
		if isCharging {
			return "üîå‚ö°"
		}
		return "üî¥"
	case percent <= 30:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü†"
	case percent <= 60:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü°"
	default:
		if isCharging {
			return "üîã‚ö°"
		}
		return "üü¢"
	}
}

// onReady –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∫–æ–Ω–∫—É –≤ —Ç—Ä–µ–µ
func onReady() {
	iconData := getAppIconFromFile()
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É, –∞ –Ω–µ —à–∞–±–ª–æ–Ω–Ω—É—é (template), —á—Ç–æ–±—ã macOS –Ω–µ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–ª –µ—ë.
	systray.SetIcon(iconData)
	systray.SetTitle("MBT")
	systray.SetTooltip("MacBat - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–µ–π")

	systray.AddSeparator()

	mChargeMode := systray.AddMenuItem("–ó–∞–≥—Ä—É–∑–∫–∞...", "")
	mChargeMode.Disable()

	mWorkMode := systray.AddMenuItem("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: --", "")
	mWorkMode.Disable()

	systray.AddSeparator()

	mCurrent := systray.AddMenuItem("–¢–µ–∫—É—â–∏–π –∑–∞—Ä—è–¥: --%", "")
	mCurrent.Disable()
	systray.AddSeparator()

	mMin := systray.AddMenuItem("–ú–∏–Ω. –ø–æ—Ä–æ–≥: --%", "")
	mMin.Disable()

	mMax := systray.AddMenuItem("–ú–∞–∫—Å. –ø–æ—Ä–æ–≥: --%", "")
	mMax.Disable()
	systray.AddSeparator()

	mHealth := systray.AddMenuItem("–ó–¥–æ—Ä–æ–≤—å–µ –±–∞—Ç–∞—Ä–µ–∏: --%", "")
	mHealth.Disable()

	mCycles := systray.AddMenuItem("–¶–∏–∫–ª–æ–≤ –∑–∞—Ä—è–¥–∞: --", "")
	mCycles.Disable()

	systray.AddSeparator()

	mQuit := systray.AddMenuItem("–í—ã—Ö–æ–¥", "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

	// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	log := logger.New(paths.LogPath(), 100, true, false)

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
	cfgManager, _ := config.New(log, paths.ConfigPath())
	conf, _ := cfgManager.Load()

	// –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É,
	// —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GUI –∏ –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
	go func() {
		time.Sleep(100 * time.Millisecond)
		updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, conf)
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∏–∫–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	go func() {
		ticker := time.NewTicker(30 * time.Second)
		defer ticker.Stop()
		for range ticker.C {
			updateMenu(mCurrent, mMin, mMax, mCycles, mHealth, mChargeMode, mWorkMode, conf)
		}
	}()

	go func() {
		<-mQuit.ClickedCh
		// –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å --background
		killBackground()
		systray.Quit()
		// –î–æ–ø—É—Å—Ç–∏–º, systray.Run() –∏–Ω–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ,
		// –ø–æ—ç—Ç–æ–º—É –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ —è–≤–Ω–æ.
		time.Sleep(100 * time.Millisecond)
		os.Exit(0)
	}()
}

//go:embed sys-tray-icon.png
var iconData []byte

func getAppIconFromFile() []byte {
	return iconData
}

func killBackground() {

	pidPath := paths.PIDPath()
	data, err := os.ReadFile(pidPath)
	if err != nil {
		return
	} // —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äì –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç
	pid, _ := strconv.Atoi(string(data))
	p, err := os.FindProcess(pid)
	if err == nil {
		_ = p.Signal(syscall.SIGTERM) // –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	}
	_ = os.Remove(pidPath)
}
